# vim: ft=zsh
# $ZDOTDIR/functions/fzf-fd-edit

fzf-fd-edit() {
  # vim: filetype=zsh

  # This script uses fd and fzf to find and edit files.
  # fd is a simple, fast and user-friendly alternative to find.
  # fzf is a general-purpose command-line fuzzy finder.

  # Exit if any command fails
  set -o pipefail

  # Print each command before executing it if DEBUG is set
  [[ -n "$DEBUG" ]] && set -x

  # fail function: print an error message to stderr and exit with an error code
  fail() {
    printf '%s\n' "$1" >&2
    exit "${2-1}"
  }

  # has function: check if a command is available
  has() {
    command -v "$1" > /dev/null 2>&1
  }

  # Check if required commands are installed
  for cmd in fd fzf; do
    has "$cmd" || fail "Can't find $cmd - install it and try again."
  done

  # Determine the preview command based on the availability of bat
  if has bat; then
    preview_cmd='bat --color=always --line-range :500 {}'
  else
    preview_cmd='less -N -S -R -+F -+X -M {}'
  fi

  # fd-find-edit function: find and edit files using fd and fzf
  fd-find-edit() {
    local file
    file=$(fd --hidden --follow --exclude .git . "$1" | fzf --query="$1" --no-multi --select-1 --exit-0 --preview "$preview_cmd")
    [[ -n "$file" ]] && $EDITOR "$file"
  }

  # Check for help flag
  if [[ $1 == "--help" ]]; then
    echo "Usage: fd-find-edit [search query]"
    echo "Search for files containing [search query] and open the selected file in your default editor."
    echo "The search is case-insensitive and includes hidden files."
    echo "If bat is installed on your system, it will be used for syntax-highlighted previews; otherwise, less will be used."
  else
    # Call the fd-find-edit function with all script arguments
    fd-find-edit "$@"
  fi
}
